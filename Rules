#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.


preprocess do
  sorted_articles.each do |p|
    if not p[:excerpt] then
      # Extract the excerpts from the body, if not given.
      p[:excerpt] = p.raw_content.split("\n\n")[0]
    end

    if p[:excerpt] then
      p[:excerpt] = :markdown
    end
  end
end

compile '/assets/css/*'  do
  print "Doing bootstrap #{item.identifier}\n"
  filter :less
  #filter :rainpress
end

compile '/assets/js/*' do
  print "Doing javascript  #{item.identifier}\n"
  #filter :yui_compressor
end

compile '*' do

  #if item.binary?
  #  # don’t filter binary items
  #else
  #  filter :erb
  #  layout 'default'
  #end
  #item[:extension] returns 'html.erb' for multi-dotted filename

  ext = item[:extension].nil? ? nil : item[:extension].split('.').last
  print "Compiling #{item.identifier}"

  if ext == 'erb'
    filter :erb
  elsif ext == 'haml' || ext.nil?
    filter :haml
    #layout 'default'

    if item[:layout]
       layout 'visualisations'
    else
        layout 'default'
    end

  elsif ext == 'md' || ext == 'markdown' || ext == 'erb'
    filter :erb
    filter :kramdown
    layout 'default'
  elsif ext == 'less'
    filter :less
    filter :rainpress
  elsif item.binary?
    print "Binary object - no compilation action"
  else
    raise "Filter is not configured for #{item.identifier} in Rules file. Using #{ext} or #{:extension}"
  end


  print " .. Done\n"
end

route '/assets/css/*' do
  item.identifier.chop + '.css'
end

route '/assets/js/*' do
  item.identifier.chop + '.js'
end




route '*' do

  print "  Routing #{item.identifier}\n "

  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb


